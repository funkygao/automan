#!/usr/bin/php
<?php

require_once 'bootstrap.php';

/**
 * Automatically generate api doc according our customized phpdoc tags.
 *
 * Currently supported tags:
 * InputTag
 * OutputTag
 */
class Automan
{
    const SERVICE = 'Services\\';
    const HTTP_HOST = 'http://localhost';

    private function _baseClassName($filename)
    {
        return substr(basename($filename), 0, -strlen('.php'));
    }

    private function _fullQualifiedClassName($filename)
    {
        return self::SERVICE . $this->_baseClassName($filename);
    }

    private function _handleAnnotationTag($filename, Annotation $tag)
    {
        if ($tag instanceof InputTag) {
            $jsonFile = dirname($filename) . '/' . $tag->jsonf;
            print_r(json_decode(file_get_contents($jsonFile), TRUE));
        } elseif ($tag instanceof OutputTag) {
            $jsonFile = dirname($filename) . '/' . $tag->jsonf;
            print_r(json_decode(file_get_contents($jsonFile), TRUE));
        }
    }

    public function getApiUrl($basecls, $methodName)
    {
        return self::HTTP_HOST . '/api/?class=' . $basecls
            . '&method=' . $methodName
            . '&params=';
    }

    public function parsePhpFile($filename)
    {
        require_once $filename;

        $clsname = $this->_fullQualifiedClassName($filename);
        echo "Parsing class $clsname...\n";

        $reflection = new ReflectionClass($clsname);
        foreach ($reflection->getMethods() as $method) {
           $p = new ReflectionAnnotatedMethod($method->class, $method->name);

           foreach (array('InputTag', 'OutputTag') as $tagName) {
               $tag = $p->getAnnotation($tagName);
               if (!$tag) {
                   continue;
               }

               $this->_handleAnnotationTag($filename, $tag);
           }
       }
    }
}

function showHelp() {
    global $argv;
    echo "Usage: " . $argv[0] . " filename [filename]\n";
}

function main() {
    global $argv;
    ini_set('register_argc_argv', 'On');
    if (count($argv) == 1) {
        showHelp();
        exit(0);
    }

    $man = new Automan();
    foreach ($argv as $idx => $filename) {
        if ($idx == 0) {
            continue;
        }

        $man->parsePhpFile($filename);
    }
}

main();
